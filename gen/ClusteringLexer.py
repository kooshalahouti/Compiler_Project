# Generated from D:/uni/Compiler/finalProject/pythonProject/grammar/Clustering.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,4,13,130,8,13,
        11,13,12,13,131,1,14,4,14,135,8,14,11,14,12,14,136,1,14,1,14,4,14,
        141,8,14,11,14,12,14,142,1,15,1,15,5,15,147,8,15,10,15,12,15,150,
        9,15,1,16,1,16,5,16,154,8,16,10,16,12,16,157,9,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,186,
        8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,3,18,216,8,18,1,19,4,19,219,8,19,11,19,12,19,220,
        1,19,1,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,5,1,
        0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,
        10,10,13,13,34,34,3,0,9,10,13,13,32,32,236,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,
        5,45,1,0,0,0,7,47,1,0,0,0,9,54,1,0,0,0,11,61,1,0,0,0,13,85,1,0,0,
        0,15,104,1,0,0,0,17,106,1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,23,
        115,1,0,0,0,25,123,1,0,0,0,27,129,1,0,0,0,29,134,1,0,0,0,31,144,
        1,0,0,0,33,151,1,0,0,0,35,185,1,0,0,0,37,215,1,0,0,0,39,218,1,0,
        0,0,41,42,5,40,0,0,42,2,1,0,0,0,43,44,5,44,0,0,44,4,1,0,0,0,45,46,
        5,41,0,0,46,6,1,0,0,0,47,48,5,75,0,0,48,49,5,77,0,0,49,50,5,101,
        0,0,50,51,5,97,0,0,51,52,5,110,0,0,52,53,5,115,0,0,53,8,1,0,0,0,
        54,55,5,68,0,0,55,56,5,66,0,0,56,57,5,83,0,0,57,58,5,67,0,0,58,59,
        5,65,0,0,59,60,5,78,0,0,60,10,1,0,0,0,61,62,5,65,0,0,62,63,5,103,
        0,0,63,64,5,103,0,0,64,65,5,108,0,0,65,66,5,111,0,0,66,67,5,109,
        0,0,67,68,5,101,0,0,68,69,5,114,0,0,69,70,5,97,0,0,70,71,5,116,0,
        0,71,72,5,105,0,0,72,73,5,118,0,0,73,74,5,101,0,0,74,75,5,67,0,0,
        75,76,5,108,0,0,76,77,5,117,0,0,77,78,5,115,0,0,78,79,5,116,0,0,
        79,80,5,101,0,0,80,81,5,114,0,0,81,82,5,105,0,0,82,83,5,110,0,0,
        83,84,5,103,0,0,84,12,1,0,0,0,85,86,5,83,0,0,86,87,5,112,0,0,87,
        88,5,101,0,0,88,89,5,99,0,0,89,90,5,116,0,0,90,91,5,114,0,0,91,92,
        5,97,0,0,92,93,5,108,0,0,93,94,5,67,0,0,94,95,5,108,0,0,95,96,5,
        117,0,0,96,97,5,115,0,0,97,98,5,116,0,0,98,99,5,101,0,0,99,100,5,
        114,0,0,100,101,5,105,0,0,101,102,5,110,0,0,102,103,5,103,0,0,103,
        14,1,0,0,0,104,105,5,61,0,0,105,16,1,0,0,0,106,107,5,112,0,0,107,
        108,5,108,0,0,108,109,5,111,0,0,109,110,5,116,0,0,110,18,1,0,0,0,
        111,112,5,120,0,0,112,20,1,0,0,0,113,114,5,121,0,0,114,22,1,0,0,
        0,115,116,5,100,0,0,116,117,5,97,0,0,117,118,5,116,0,0,118,119,5,
        97,0,0,119,120,5,115,0,0,120,121,5,101,0,0,121,122,5,116,0,0,122,
        24,1,0,0,0,123,124,5,102,0,0,124,125,5,105,0,0,125,126,5,108,0,0,
        126,127,5,101,0,0,127,26,1,0,0,0,128,130,7,0,0,0,129,128,1,0,0,0,
        130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,28,1,0,0,0,133,
        135,7,0,0,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,
        137,1,0,0,0,137,138,1,0,0,0,138,140,5,46,0,0,139,141,7,0,0,0,140,
        139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,
        30,1,0,0,0,144,148,7,1,0,0,145,147,7,2,0,0,146,145,1,0,0,0,147,150,
        1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,32,1,0,0,0,150,148,1,
        0,0,0,151,155,5,34,0,0,152,154,8,3,0,0,153,152,1,0,0,0,154,157,1,
        0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,155,1,
        0,0,0,158,159,5,34,0,0,159,34,1,0,0,0,160,161,5,119,0,0,161,162,
        5,97,0,0,162,163,5,114,0,0,163,186,5,100,0,0,164,165,5,99,0,0,165,
        166,5,111,0,0,166,167,5,109,0,0,167,168,5,112,0,0,168,169,5,108,
        0,0,169,170,5,101,0,0,170,171,5,116,0,0,171,186,5,101,0,0,172,173,
        5,97,0,0,173,174,5,118,0,0,174,175,5,101,0,0,175,176,5,114,0,0,176,
        177,5,97,0,0,177,178,5,103,0,0,178,186,5,101,0,0,179,180,5,115,0,
        0,180,181,5,105,0,0,181,182,5,110,0,0,182,183,5,103,0,0,183,184,
        5,108,0,0,184,186,5,101,0,0,185,160,1,0,0,0,185,164,1,0,0,0,185,
        172,1,0,0,0,185,179,1,0,0,0,186,36,1,0,0,0,187,188,5,101,0,0,188,
        189,5,117,0,0,189,190,5,99,0,0,190,191,5,108,0,0,191,192,5,105,0,
        0,192,193,5,100,0,0,193,194,5,101,0,0,194,195,5,97,0,0,195,216,5,
        110,0,0,196,197,5,108,0,0,197,216,5,49,0,0,198,199,5,108,0,0,199,
        216,5,50,0,0,200,201,5,109,0,0,201,202,5,97,0,0,202,203,5,110,0,
        0,203,204,5,104,0,0,204,205,5,97,0,0,205,206,5,116,0,0,206,207,5,
        116,0,0,207,208,5,97,0,0,208,216,5,110,0,0,209,210,5,99,0,0,210,
        211,5,111,0,0,211,212,5,115,0,0,212,213,5,105,0,0,213,214,5,110,
        0,0,214,216,5,101,0,0,215,187,1,0,0,0,215,196,1,0,0,0,215,198,1,
        0,0,0,215,200,1,0,0,0,215,209,1,0,0,0,216,38,1,0,0,0,217,219,7,4,
        0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,
        0,0,221,222,1,0,0,0,222,223,6,19,0,0,223,40,1,0,0,0,9,0,131,136,
        142,148,155,185,215,220,1,6,0,0
    ]

class ClusteringLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    NUM = 14
    FLOAT = 15
    VAR = 16
    STRING = 17
    LINKAGE_TYPE = 18
    AFFINITY_TYPE = 19
    WS = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'KMeans'", "'DBSCAN'", "'AgglomerativeClustering'", 
            "'SpectralClustering'", "'='", "'plot'", "'x'", "'y'", "'dataset'", 
            "'file'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "FLOAT", "VAR", "STRING", "LINKAGE_TYPE", "AFFINITY_TYPE", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "NUM", 
                  "FLOAT", "VAR", "STRING", "LINKAGE_TYPE", "AFFINITY_TYPE", 
                  "WS" ]

    grammarFileName = "Clustering.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


